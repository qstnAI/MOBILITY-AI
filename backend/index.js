// Backend b√°sico en Node.js + Express para conectar tu frontend con OpenAI
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const { OpenAI } = require("openai");
const { google } = require('googleapis');
const fs = require("fs");
const path = require("path");
const config = require('./config');
require("dotenv").config();

const app = express();
const PORT = 3001;

app.use(cors());
app.use(bodyParser.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Configuraci√≥n de Google Sheets
const auth = new google.auth.GoogleAuth({
  credentials: {
    type: "service_account",
    project_id: "mobility-ia",
    private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID,
    private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    client_id: process.env.GOOGLE_CLIENT_ID,
    auth_uri: "https://accounts.google.com/o/oauth2/auth",
    token_uri: "https://oauth2.googleapis.com/token",
    auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
    client_x509_cert_url: process.env.GOOGLE_CLIENT_X509_CERT_URL,
    universe_domain: "googleapis.com"
  },
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({ version: 'v4', auth });

// Funci√≥n para guardar datos en Google Sheets
const saveToGoogleSheets = async (data, sheetId) => {
  try {
    console.log("üîÑ Preparando datos para Google Sheets:", data);
    
    // Preparar los datos para Google Sheets
    const values = data.map(row => [
      row['Fecha'],
      row['Hora'],
      row['Tipo'],
      row['Colaborador'],
      row['√Årea'],
      row['Problema/Oportunidad'] || row['Descripci√≥n de la Mejora'],
      row['Propuesta de Soluci√≥n'] || '',
      row['Resultado IA']
    ]);

    console.log("üìä Valores a enviar:", values);

    // Agregar fila a la hoja
    const response = await sheets.spreadsheets.values.append({
      spreadsheetId: sheetId,
      range: 'A:H', // Columnas A-H
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        values: values
      }
    });

    console.log("üìà Respuesta de Google Sheets:", response.data);
    console.log(`‚úÖ Datos guardados en Google Sheets: ${sheetId}`);
    return true;
  } catch (error) {
    console.error("‚ùå Error guardando en Google Sheets:", error);
    console.error("‚ùå Detalles del error:", error.message);
    return false;
  }
};

// Endpoint DMAMA IA - PARA CHAT NORMAL (con foco en innovaci√≥n Mobility ADO)
app.post("/api/dmama", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt || typeof prompt !== "string" || prompt.trim() === "") {
    return res.status(400).json({ error: "El prompt es requerido." });
  }
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: `Eres Mobility AI, el asistente especializado en innovaci√≥n y mejora continua de Mobility ADO.

CONTEXTO MOBILITY ADO:
‚Ä¢ L√≠der en movilidad en M√©xico y Latinoam√©rica
‚Ä¢ Misi√≥n: "Mejoramos la calidad de vida a trav√©s de la movilidad"
‚Ä¢ Valores: seguridad, eficiencia, innovaci√≥n, sostenibilidad
‚Ä¢ Enfoque: hacer que los viajes sean accesibles para todos

TU PROP√ìSITO:
Ayudar a colaboradores a desarrollar ideas, resolver retos y potenciar la innovaci√≥n dentro de Mobility ADO.

√ÅREAS EN LAS QUE ESPECIALMENTE PUEDES AYUDAR:
‚úÖ Generaci√≥n de ideas para mejorar procesos, productos o servicios
‚úÖ An√°lisis de retos operativos y propuestas de soluci√≥n
‚úÖ Estructuraci√≥n de propuestas de mejora e innovaci√≥n
‚úÖ Sugerencia de KPIs e indicadores para medir impacto
‚úÖ Detecci√≥n de riesgos y oportunidades de mejora
‚úÖ Orientaci√≥n sobre metodolog√≠as de innovaci√≥n (DMAMA, etc.)
‚úÖ Colaboraci√≥n entre √°reas para mejores resultados

ESTILO DE RESPUESTA:
‚Ä¢ Conversacional pero profesional
‚Ä¢ Usa emojis moderadamente üòä
‚Ä¢ S√© pr√°ctico y orientado a soluciones
‚Ä¢ Cuando sea relevante, sugiere KPIs, m√©tricas o datos necesarios
‚Ä¢ Fomenta la innovaci√≥n y mejora continua
‚Ä¢ Adapta tu respuesta al √°rea del colaborador (operaciones, mantenimiento, comercial, etc.)

EJEMPLOS DE RESPUESTAS ADECUADAS:
"¬°Excelente idea! Para medir su impacto podr√≠amos considerar estos KPIs..."
"Ese reto operativo es interesante. Te sugiero analizar estos datos..."
"Para tu propuesta de innovaci√≥n, necesitar√≠amos definir estos indicadores..."
"¬øHas considerado colaborar con el √°rea de X para fortalecer tu idea?"

S√© el coach de innovaci√≥n que los colaboradores de Mobility ADO necesitan.` 
        },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 500
    });
    
    res.json({ response: completion.choices[0].message.content });
    
  } catch (err) {
    console.error("Error en /api/dmama:", err.response?.data || err.message);
    res.status(500).json({ error: "Error al conectar con OpenAI" });
  }
});

// Endpoint CHAT - PARA FORMATOS ESTRUCTURADOS (Potenciador de Ideas)
app.post("/api/chat", async (req, res) => {
  const { messages } = req.body;

  if (!Array.isArray(messages) || messages.some(msg => typeof msg.content !== "string" || msg.content.trim() === "")) {
    return res.status(400).json({ error: "Todos los mensajes deben tener contenido v√°lido." });
  }

  const systemPrompt = {
    role: "system",
    content: `Eres MOBILITY AI, experto en innovaci√≥n y mejora continua de Mobility ADO.

FORMATO ESTRICTO PARA PROPUESTAS DE INNOVACI√ìN:

RESUMEN DEL VALOR DE LA IDEA
- [Breve descripci√≥n del valor principal y impacto esperado]

SUGERENCIAS DE MEJORA  
- [Sugerencia 1 con enfoque pr√°ctico]
- [Sugerencia 2 para potenciar la idea]
- [Sugerencia 3 de implementaci√≥n]

RIESGOS O DESAF√çOS A CONSIDERAR
- [Riesgo principal y mitigaci√≥n sugerida]
- [Desaf√≠o operativo y soluci√≥n propuesta]

PASOS INICIALES RECOMENDADOS
- [Paso 1 concreto y accionable]
- [Paso 2 para validaci√≥n temprana]
- [Paso 3 de implementaci√≥n inicial]

KPI CLARO Y MEDIBLE PARA EVALUAR RESULTADOS
- [KPI principal con f√≥rmula de c√°lculo si es aplicable]
- [Meta sugerida y periodicidad de medici√≥n]

COLABORACI√ìN INTER√ÅREAS RECOMENDADA
- [√Årea 1 que podr√≠a enriquecer la propuesta]
- [√Årea 2 para implementaci√≥n conjunta]

Incluye datos, m√©tricas y KPIs relevantes. S√© espec√≠fico y accionable.`
  };

  const newMessages = messages[0]?.role === "system"
    ? [systemPrompt, ...messages.slice(1)]
    : [systemPrompt, ...messages];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: newMessages,
      temperature: 0.4,
      max_tokens: 800
    });

    res.json({ response: completion.choices[0].message.content });
  } catch (err) {
    console.error("Error en /api/chat:", err.response?.data || err.message);
    res.status(500).json({ error: "Error al conectar con OpenAI" });
  }
});

// Endpoint para DocuIA espec√≠fico
app.post("/api/docuia", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt || typeof prompt !== "string" || prompt.trim() === "") {
    return res.status(400).json({ error: "El prompt es requerido." });
  }
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: `Eres Mobility AI, experto en metodolog√≠a DMAMA para documentaci√≥n de ideas innovadoras.

FORMATO PARA DOCUMENTACI√ìN DMAMA:

1. PLANTEAMIENTO DEL PROBLEMA
- [Contexto del problema con datos relevantes si se disponen]
- [Impacto actual del problema en operaciones o experiencia]

2. OBJETIVO DEL PROYECTO  
- [Objetivo SMART espec√≠fico]
- [Resultado esperado cuantificable]

3. INDICADORES DE √âXITO
- [KPI 1: f√≥rmula, meta y periodicidad]
- [KPI 2: m√©trica de impacto cuantificable]
- [KPI 3: indicador de proceso o calidad]

4. HERRAMIENTAS √öTILES
- [Herramienta 1: aplicaci√≥n pr√°ctica y beneficios]
- [Herramienta 2: c√≥mo implementarla en Mobility ADO]
- [Herramienta 3: integraci√≥n con sistemas existentes]

5. TIPS POR FASE DMAMA
- DEFINIR: [C√≥mo enfocar el problema en contexto Mobility ADO]
- MEDIR: [Qu√© datos recolectar y c√≥mo obtenerlos]
- ANALIZAR: [T√©cnicas para identificar causas ra√≠z]  
- MEJORAR: [C√≥mo generar and seleccionar soluciones innovadoras]
- ASEGURAR: [Estandarizaci√≥n y seguimiento en la organizaci√≥n]

Incluye m√©tricas, KPIs y datos espec√≠ficos cuando sea relevante.` 
        },
        { role: "user", content: prompt }
      ],
      temperature: 0.5,
      max_tokens: 700
    });
    res.json({ response: completion.choices[0].message.content });
  } catch (err) {
    console.error("Error en /api/docuia:", err.response?.data || err.message);
    res.status(500).json({ error: "Error al conectar con OpenAI" });
  }
});

// Endpoint para guardar datos autom√°ticamente en Google Sheets con logging
app.post("/api/save-data", async (req, res) => {
  const { type, data } = req.body;
  
  console.log("üìù Recibiendo datos para guardar:", { type, data });
  
  if (!type || !data) {
    console.log("‚ùå Datos faltantes:", { type, data });
    return res.status(400).json({ error: "Tipo y datos son requeridos" });
  }

  try {
    let formattedData;
    const sheetId = config.GOOGLE_SHEET_ID; // ID de tu Google Sheet

    console.log("üîó Google Sheet ID:", sheetId);

    if (!sheetId) {
      console.log("‚ùå Google Sheet ID no configurado");
      return res.status(500).json({ error: "Google Sheet ID no configurado" });
    }

    if (type === 'potenciador') {
      formattedData = [{
        'Fecha': new Date().toLocaleDateString('es-ES'),
        'Hora': new Date().toLocaleTimeString('es-ES'),
        'Tipo': 'Potenciador de Ideas',
        'Colaborador': data.collaborator,
        '√Årea': data.area,
        'Problema/Oportunidad': data.problem,
        'Propuesta de Soluci√≥n': data.proposal,
        'Resultado IA': data.result || 'No generado'
      }];
    } else if (type === 'docuia') {
      formattedData = [{
        'Fecha': new Date().toLocaleDateString('es-ES'),
        'Hora': new Date().toLocaleTimeString('es-ES'),
        'Tipo': 'DocuIA DMAMA',
        'Colaborador': data.colaborador,
        '√Årea': data.area,
        'Descripci√≥n de la Mejora': data.descripcion,
        'Resultado IA': data.result || 'No generada'
      }];
    } else {
      return res.status(400).json({ error: "Tipo no v√°lido" });
    }

    const success = await saveToGoogleSheets(formattedData, sheetId);
    
    if (success) {
      res.json({ 
        success: true, 
        message: "Datos guardados autom√°ticamente en Google Sheets",
        sheetId: sheetId
      });
    } else {
      res.status(500).json({ error: "Error al guardar datos en Google Sheets" });
    }
  } catch (error) {
    console.error("Error en /api/save-data:", error);
    res.status(500).json({ error: "Error interno del servidor" });
  }
});

// Endpoint de prueba para Google Sheets
app.get("/api/test-sheets", async (req, res) => {
  try {
    const sheetId = config.GOOGLE_SHEET_ID;
    console.log("Testing Google Sheets with ID:", sheetId);
    
    // Intentar leer la hoja para verificar permisos
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: sheetId,
      range: 'A1:H1',
    });
    
    res.json({ 
      success: true, 
      message: "Google Sheets conectado correctamente",
      sheetId: sheetId,
      headers: response.data.values?.[0] || []
    });
  } catch (error) {
    console.error("Error testing Google Sheets:", error);
    res.status(500).json({ 
      error: "Error conectando con Google Sheets", 
      details: error.message 
    });
  }
});

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({ 
    status: "OK", 
    message: "Servidor funcionando correctamente",
    endpoints: {
      dmama: "Chat general de innovaci√≥n",
      chat: "Formatos estructurados para propuestas",
      docuia: "Documentaci√≥n DMAMA",
      saveData: "Guardar datos autom√°ticamente",
      testSheets: "Probar conexi√≥n con Google Sheets"
    }
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Servidor backend escuchando en http://localhost:${PORT}`);
  console.log(`üìã Endpoints disponibles:`);
  console.log(`   POST /api/dmama    - Chat de innovaci√≥n general (gpt-4o-mini)`);
  console.log(`   POST /api/chat     - Propuestas estructuradas con KPIs (gpt-4o-mini)`);
  console.log(`   POST /api/docuia   - Documentaci√≥n DMAMA con m√©tricas (gpt-4o-mini)`);
  console.log(`   GET  /health       - Health check`);
});